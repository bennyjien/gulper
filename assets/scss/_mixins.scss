// HELPERS
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

// BREAKPOINTS
@mixin breakpoint($zombie) {
	@if $zombie == creeper {
		@media screen and (min-width: $width-creeper) { @content; }
	}
	@else if $zombie == crawler {
		@media screen and (min-width: $width-crawler) { @content; }
	}
	@else if $zombie == walker {
		@media screen and (min-width: $width-walker) { @content; }
	}
	@else if $zombie == runner {
		@media screen and (min-width: $width-runner) { @content; }
	}
	@else if $zombie == jumper {
		@media screen and (min-width: $width-jumper) { @content; }
	}
	@else if $zombie == flyer {
		@media screen and (min-width: $width-flyer) { @content; }
	}
	@else if $zombie == teleporter {
		@media screen and (min-width: $width-teleporter) { @content; }
	}
	@else if $zombie == demigod {
		@media screen and (min-width: $width-demigod) { @content; }
	}
	@else if $zombie == god {
		@media screen and (min-width: $width-god) { @content; }
	}
	@else if $zombie == creeper-crawler {
		@media screen and (min-width: $width-creeper) and (max-width: #{$width-crawler - 1}) { @content; }
	}
	@else if $zombie == crawler-walker {
		@media screen and (min-width: $width-crawler) and (max-width: #{$width-walker - 1}) { @content; }
	}
	@else if $zombie == walker-runner {
		@media screen and (min-width: $width-walker) and (max-width: #{$width-runner - 1}) { @content; }
	}
	@else if $zombie == runner-jumper {
		@media screen and (min-width: $width-jumper) and (max-width: #{$width-jumper - 1}) { @content; }
	}
	@else if $zombie == jumper-flyer {
		@media screen and (min-width: $width-jumper) and (max-width: #{$width-flyer - 1}) { @content; }
	}
	@else if $zombie == flyer-teleporter {
		@media screen and (min-width: $width-flyer) and (max-width: #{$width-teleporter - 1}) { @content; }
	}
	@else if $zombie == teleporter-demigod {
		@media screen and (min-width: $width-teleporter) and (max-width: #{$width-demigod - 1}) { @content; }
	}
	@else if $zombie == demigod-god {
		@media screen and (min-width: $width-demigod) and (max-width: #{$width-god - 1}) { @content; }
	}
	@else if $zombie == watcher {
		@media screen and (-o-min-device-pixel-ratio: 1.5),
			   screen and (-webkit-min-device-pixel-ratio: 1.5),
			   screen and (min-resolution: 144dpi) { @content; }
	}
}

// TYPOGRAPHY
@mixin font-fluid($min-vw, $max-vw, $min-value, $max-value) {
	font-size: $min-value;

	@media screen and (min-width: $min-vw) {
		font-size: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
	}

	@media screen and (min-width: $max-vw) {
		font-size: $max-value;
	}
}

@mixin font-size-100 {
	font-size: $font-size-100;
	line-height: $line-height-100;
}

@mixin font-size-200 {
	font-size: $font-size-200;
	line-height: $line-height-200;
}

@mixin font-size-300 {
	font-size: $font-size-300;
	line-height: $line-height-300;
}

@mixin font-size-400 {
	font-size: $font-size-400;
	line-height: $line-height-400;
}

@mixin font-size-500 {
	font-size: $font-size-500;
	line-height: $line-height-500;
}

@mixin font-size-600 {
	font-size: $font-size-600;
	line-height: $line-height-600;
}

@mixin font-size-700 {
	font-size: $font-size-700;
	line-height: $line-height-700;
}

@mixin font-size-800 {
	font-size: $font-size-800;
	line-height: $line-height-800;
}

@mixin font-size-900 {
	font-size: $font-size-900;
	letter-spacing: -0.04em;
	line-height: $line-height-900;
}

@mixin font-size-1000 {
	font-size: $font-size-1000;
	letter-spacing: -0.04em;
	line-height: $line-height-1000;
}

@mixin font-size-1100 {
	font-size: $font-size-1100;
	letter-spacing: -0.04em;
	line-height: $line-height-1100;
}

@mixin font-size-1200 {
	font-size: $font-size-1200;
	letter-spacing: -0.04em;
	line-height: $line-height-1200;
}

@mixin font-size-h1 {
	font-size: $font-size-1000;
	letter-spacing: -0.04em;
	line-height: $line-height-1000;
}

@mixin font-size-h2 {
	font-size: $font-size-800;
	letter-spacing: -0.04em;
	line-height: $line-height-800;
}

@mixin font-size-h3 {
	font-size: $font-size-700;
	line-height: $line-height-700;
}

@mixin font-size-h4 {
	font-size: $font-size-600;
	line-height: $line-height-600;
}

@mixin font-size-h5 {
	font-size: $font-size-500;
	line-height: $line-height-500;
}

@mixin font-size-h6 {
	font-size: $font-size-400;
	line-height: $line-height-400;
}

@mixin ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin hyphenate {
	overflow-wrap: break-word;
	word-wrap: break-word;
	//hyphens: auto;
}

// BUTTON
@mixin button($style: solid, $size: 500) {
	border: 1px solid transparent;
	border-radius: 0;
	color: $white;
	display: inline-block;
	font-weight: 700;
	padding: 15px 24px;
	text-align: center;
	transition: all 0.2s ease-out;
	vertical-align: middle;
	white-space: nowrap;

	&:hover,
	&:focus {
		outline: 0;
		text-decoration: none;
	}

	@if $style == solid {
		background-color: $color-one-500;
		padding: 15px 24px;

		&:visited {
			color: $white;
		}

		&:hover,
		&:focus {
			background-color: $color-one-600;
		}
	}

	@if $style == line {
		background-color: transparent;
		border-color: $color-one-500;
		color: $color-one-500;
		padding: 15px 24px;

		&:visited {
			color: $color-one-500;
		}

		&:hover,
		&:focus {
			border-color: $color-one-600;
			color: $color-one-600;
		}
	}

	@if $style == link {
		color: $color-text;
		padding: 15px 0;

		&:hover,
		&:focus {
			text-decoration: underline;
		}
	}

	@if $style == gray {
		background-color: $color-500;
		color: $white;
		padding: 15px 24px;

		&:visited {
			background-color: $color-500;
			color: $white;
		}

		&:hover,
		&:focus {
			background-color: $color-600;
			color: $white;
		}
	}

	@if $style == disable {
		background-color: $color-400;
		pointer-events: none;

		&:hover,
		&:focus {
			background-color: $color-400;
		}
	}

	@if $size == 400 {
		@include font-size-400;
	}

	@if $size == 600 {
		@include font-size-600;
	}
}

// LAYOUT
@mixin column-1 {
	width: 25%;

	@include breakpoint(walker) {
		width: 12.5%;
	}
}

@mixin column-2 {
	width: 50%;

	@include breakpoint(walker) {
		width: 25%;
	}
}

@mixin column-3 {
	width: 50%;

	@include breakpoint(walker) {
		width: 37.5%;
	}
}

@mixin column-4 {
	width: 50%;
}

@mixin column-5 {
	width: 100%;

	@include breakpoint(walker) {
		width: 62.5%;
	}
}

@mixin column-6 {
	width: 100%;

	@include breakpoint(walker) {
		width: 75%;
	}
}

@mixin column-7 {
	width: 100%;

	@include breakpoint(walker) {
		width: 87.5%;
	}
}

@mixin column-8 {
	width: 100%;
}

@mixin wrapper-x {
	margin-left: auto;
	margin-right: auto;
	max-width: $width-max;
	padding-left: $padding-origin;
	padding-right: $padding-origin;

	@include breakpoint(creeper) {
		padding-left: $padding-creeper;
		padding-right: $padding-creeper;
	}

	@include breakpoint(crawler) {
		padding-left: $padding-crawler;
		padding-right: $padding-crawler;
	}

	@include breakpoint(walker) {
		padding-left: $padding-walker;
		padding-right: $padding-walker;
	}
}

@mixin wrapper-y {
	padding-bottom: $padding-origin * 2;
	padding-top: $padding-origin * 1.5;

	@include breakpoint(creeper) {
		padding-bottom: $padding-creeper * 2;
		padding-top: $padding-creeper * 1.5;
	}

	@include breakpoint(crawler) {
		padding-bottom: $padding-crawler * 1.5;
		padding-top: $padding-crawler * 1.5;
	}

	@include breakpoint(walker) {
		padding-bottom: $padding-walker * 1.5;
		padding-top: $padding-walker * 1.5;
	}
}

@mixin wrapper-y-bottom {
	padding-top: 0;
}

@mixin wrapper-y-top {
	padding-bottom: 0;
}

@mixin wrapper-xy {
	padding: $padding-origin * 2;
}

@mixin wrapper-xy-bigger {
	padding: $padding-origin * 4;
}

@mixin wrapper-xy-big {
	padding: $padding-origin * 3;
}

@mixin wrapper-xy-small {
	padding: $padding-origin;
}

@mixin wrapper-xy-smaller {
	padding: $padding-origin / 2;
}

@mixin unwrapper-x {
	margin-left: -$padding-origin;
	margin-right: -$padding-origin;

	.js-unwrapper {
		opacity: 0;
		transition: opacity 0.2s ease;

		.no-js & {
			opacity: 1;
		}

		&.is-unwrapped {
			opacity: 1;
		}
	}

	@include breakpoint(creeper) {
		margin-left: -$padding-creeper;
		margin-right: -$padding-creeper;
	}

	@include breakpoint(crawler) {
		margin-left: -$padding-crawler;
		margin-right: -$padding-crawler;
	}

	@include breakpoint(walker) {
		margin-left: -$padding-walker;
		margin-right: -$padding-walker;
	}

	@include breakpoint(flyer) {
		margin-left: calc(-50vw + (#{$width-max} - #{$padding-walker * 2}) / 2);
		margin-right: calc(-50vw + (#{$width-max} - #{$padding-walker * 2}) / 2);
	}
}

@mixin aside {
	flex: 1 1 auto;
	width: 100%;

	@include breakpoint(runner) {
		flex: 0 0 auto;
		margin-left: $padding-runner / 1.5;
		width: 25%;
	}
}

@mixin aside-left {
	margin-bottom: $padding-origin * 1.5;
	order: -1;

	@include breakpoint(runner) {
		margin-bottom: 0;
		margin-left: 0;
		margin-right: $padding-runner / 1.5;
	}

	@include breakpoint(jumper) {
		margin-right: $padding-jumper;
	}
}

@mixin clearfix {

	&:before,
	&:after {
		content: "";
		display: table;
	}

	&:after {
		clear: both;
	}
}

@mixin hidden {
	border: 0;
	clip: rect(0, 0, 0, 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

@mixin column-items($margin) {
	$length: length($margin);
	$vertical: nth($margin, 1);
	$horizontal: $vertical;

	margin: -1%;
	@if $length == 1 {
		margin: calc(#{$vertical} * -1);
	}
	@else if $length == 2 {
		$horizontal: nth($margin, 2);
		margin: calc(#{$vertical} * -1) calc(#{$horizontal} * -1);
	}
}

@mixin column-item($margin, $item: 0) {
	$length: length($margin);
	$vertical: nth($margin, 1);
	$horizontal: $vertical;

	margin: 1%;
	@if $length == 1 {
		margin: calc(#{$vertical});
		@if $item != 0 {
			width: #{(100% - (2% * $item)) / $item};
			width: calc((100% - #{2 * $item * $vertical}) / #{$item});
		}
	}
	@else if $length == 2 {
		$horizontal: nth($margin, 2);
		margin: calc(#{$vertical}) calc(#{$horizontal});
		@if $item != 0 {
			width: #{(100% - (2% * $item)) / $item};
			width: calc((100% - #{2 * $item * $horizontal}) / #{$item});
		}
	}
}

@mixin flex-flow($breakpoint, $width, $margin) {
	display: flex;
	flex-wrap: wrap;
	margin: calc(#{$margin} * -1);

	> * {
		flex-basis: calc(calc(#{$breakpoint} - 100%) * 999);
		flex-grow: 1;
		margin: $margin;
		max-width: 100%;
		min-width: calc(#{$width} - (#{$margin} * 2));
	}
}

@mixin visible {
	display: block !important;
	height: auto !important;
	opacity: 1 !important;
	overflow: visible !important;
	visibility: visible !important;
}
