@use "sass:math";

// HELPERS
@function strip-unit($value) {
	@return math.div($value, $value * 0 + 1);
}

// BREAKPOINTS
$breakpoints: creeper, crawler, walker, runner, jumper, flyer, teleporter, demigod, god;

@mixin breakpoint($zombie) {
	@if $zombie == creeper {
		@media screen and (min-width: $width-creeper) { @content; }
	}
	@else if $zombie == crawler {
		@media screen and (min-width: $width-crawler) { @content; }
	}
	@else if $zombie == walker {
		@media screen and (min-width: $width-walker) { @content; }
	}
	@else if $zombie == runner {
		@media screen and (min-width: $width-runner) { @content; }
	}
	@else if $zombie == jumper {
		@media screen and (min-width: $width-jumper) { @content; }
	}
	@else if $zombie == flyer {
		@media screen and (min-width: $width-flyer) { @content; }
	}
	@else if $zombie == teleporter {
		@media screen and (min-width: $width-teleporter) { @content; }
	}
	@else if $zombie == demigod {
		@media screen and (min-width: $width-demigod) { @content; }
	}
	@else if $zombie == god {
		@media screen and (min-width: $width-god) { @content; }
	}
	@else if $zombie == origin-walker {
		@media screen and (max-width: #{$width-walker - 1}) { @content; }
	}
	@else if $zombie == origin-runner {
		@media screen and (max-width: #{$width-runner - 1}) { @content; }
	}
	@else if $zombie == walker-runner {
		@media screen and (min-width: $width-walker) and (max-width: #{$width-runner - 1}) { @content; }
	}
	@else if $zombie == watcher {
		@media screen and (-o-min-device-pixel-ratio: 1.5),
			screen and (-webkit-min-device-pixel-ratio: 1.5),
			screen and (min-resolution: 144dpi) { @content; }
	}
}

// TYPOGRAPHY
@mixin font-fluid($min-vw, $max-vw, $min-value, $max-value) {
	font-size: $min-value;

	@media screen and (min-width: $min-vw) {
		font-size: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
	}

	@media screen and (min-width: $max-vw) {
		font-size: $max-value;
	}
}

@mixin font-size-100 {
	font-size: $font-size-100;
	line-height: $line-height-100;
}

@mixin font-size-200 {
	font-size: $font-size-200;
	line-height: $line-height-200;
}

@mixin font-size-300 {
	font-size: $font-size-300;
	line-height: $line-height-300;
}

@mixin font-size-400 {
	font-size: $font-size-400;
	line-height: $line-height-400;
}

@mixin font-size-500 {
	font-size: $font-size-500;
	line-height: $line-height-500;
}

@mixin font-size-600 {
	font-size: $font-size-600;
	line-height: $line-height-600;
}

@mixin font-size-700 {
	font-size: $font-size-700;
	line-height: $line-height-700;
}

@mixin font-size-800 {
	font-size: $font-size-800;
	line-height: $line-height-800;
}

@mixin font-size-900 {
	font-size: $font-size-900;
	line-height: $line-height-900;
}

@mixin font-size-1000 {
	font-size: $font-size-1000;
	line-height: $line-height-1000;
}

@mixin font-size-1100 {
	font-size: $font-size-1100;
	line-height: $line-height-1100;
}

@mixin font-size-1200 {
	font-size: $font-size-1200;
	line-height: $line-height-1200;
}

@mixin font-style-h1 {
	font-size: $font-size-900;
	font-weight: 700;
	letter-spacing: 0.04em;
	line-height: $line-height-900;
}

@mixin font-style-h2 {
	font-size: $font-size-800;
	font-weight: 700;
	line-height: $line-height-800;
}

@mixin font-style-h3 {
	font-size: $font-size-700;
	font-weight: 700;
	line-height: $line-height-700;
}

@mixin font-style-h4 {
	font-size: $font-size-600;
	font-weight: 700;
	line-height: $line-height-600;
}

@mixin font-style-h5 {
	font-size: $font-size-500;
	font-weight: 700;
	line-height: $line-height-500;
}

@mixin font-style-h6 {
	font-size: $font-size-400;
	font-weight: 700;
	letter-spacing: -0.02em;
	line-height: $line-height-400;
	text-transform: uppercase;
}

@mixin font-style-body {
	font-size: $font-size-500;
	line-height: $line-height-500;
}

@mixin font-style-callout {
	font-size: $font-size-400;
	line-height: $line-height-400;
}

@mixin font-style-footnote {
	font-size: $font-size-300;
	line-height: $line-height-300;
}

@mixin font-style-caption {
	font-size: $font-size-200;
	line-height: $line-height-200;
}

@mixin font-style-ant {
	font-size: $font-size-100;
	line-height: $line-height-100;
}

@mixin font-style-button {
	font-size: $font-size-500;
	line-height: $line-height-500;
}

@mixin ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin hyphenate {
	overflow-wrap: break-word;
	word-wrap: break-word;
	//hyphens: auto;
}

@mixin flatlist {

	ol,
	ul {
		list-style: none;
		padding-left: 24px;
		text-indent: -24px;

		li {

			&:before {
				content: "\2022";
				display: inline-block;
				min-width: 24px;
				text-indent: 0;
				padding-right: 4px;
			}
		}
	}

	ol {

		li {
			counter-increment: list-ordered;

			&:before {
				content: counter(list-ordered) ". ";
				text-indent: 0;
			}
		}
	}
}

// LAYOUT
@mixin ratio($wph: 1/1) {

	&:before {
		content: '';
		display: inline-block;
		padding-bottom: math.div(100%, $wph);
	}
}

@mixin whitespace($margin: 1) {
	$length: length($margin);

	@if $length == 1 {
		@if unitless($margin) {
			margin: $margin * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						margin: $margin * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			margin: $margin;
		}
	}
	@else {
		$margin-top: $margin;
		$margin-right: $margin;
		$margin-bottom: $margin;
		$margin-left: $margin;

		@if $length == 2 {
			$margin-top: nth($margin, 1);
			$margin-right: nth($margin, 2);
			$margin-bottom: nth($margin, 1);
			$margin-left: nth($margin, 2);
		}
		@else if $length == 3 {
			$margin-top: nth($margin, 1);
			$margin-right: nth($margin, 2);
			$margin-bottom: nth($margin, 3);
			$margin-left: nth($margin, 2);
		}
		@else if $length == 4 {
			$margin-top: nth($margin, 1);
			$margin-right: nth($margin, 2);
			$margin-bottom: nth($margin, 3);
			$margin-left: nth($margin, 4);
		}

		@if unitless($margin-top) {
			margin-top: $margin-top * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						margin-top: $margin-top * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			margin-top: $margin-top;
		}

		@if unitless($margin-right) {
			margin-right: $margin-right * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						margin-right: $margin-right * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			margin-right: $margin-right;
		}

		@if unitless($margin-bottom) {
			margin-bottom: $margin-bottom * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						margin-bottom: $margin-bottom * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			margin-bottom: $margin-bottom;
		}

		@if unitless($margin-left) {
			margin-left: $margin-left * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						margin-left: $margin-left * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			margin-left: $margin-left;
		}
	}
}

@mixin wrapper-xy($max-width: $width-max, $padding: 1, $align: center) {
	$length: length($padding);

	max-width: $max-width;

	@if $length == 1 {
		@if unitless($padding) {
			padding: $padding * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						padding: $padding * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			padding: $padding;
		}
	}
	@else {
		$padding-top: $padding;
		$padding-right: $padding;
		$padding-bottom: $padding;
		$padding-left: $padding;

		@if $length == 2 {
			$padding-top: nth($padding, 1);
			$padding-right: nth($padding, 2);
			$padding-bottom: nth($padding, 1);
			$padding-left: nth($padding, 2);
		}
		@else if $length == 3 {
			$padding-top: nth($padding, 1);
			$padding-right: nth($padding, 2);
			$padding-bottom: nth($padding, 3);
			$padding-left: nth($padding, 2);
		}
		@else if $length == 4 {
			$padding-top: nth($padding, 1);
			$padding-right: nth($padding, 2);
			$padding-bottom: nth($padding, 3);
			$padding-left: nth($padding, 4);
		}

		@if unitless($padding-top) {
			padding-top: $padding-top * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						padding-top: $padding-top * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			padding-top: $padding-top;
		}

		@if unitless($padding-right) {
			padding-right: $padding-right * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						padding-right: $padding-right * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			padding-right: $padding-right;
		}

		@if unitless($padding-bottom) {
			padding-bottom: $padding-bottom * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						padding-bottom: $padding-bottom * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			padding-bottom: $padding-bottom;
		}

		@if unitless($padding-left) {
			padding-left: $padding-left * map-get($paddings, origin);

			@each $breakpoint in $breakpoints {
				@if (map-get($paddings, $breakpoint)) {
					@include breakpoint(#{$breakpoint}) {
						padding-left: $padding-left * map-get($paddings, $breakpoint);
					}
				}
			}
		}
		@else {
			padding-left: $padding-left;
		}
	}

	@if $align == center {
		margin-left: auto;
		margin-right: auto;
	}

	@if $align == right {
		margin-left: auto;
	}
}

// on child, use `grid-column: full || wrapper || main || sidebar`
@mixin wrapper-grid($padding: 0 1) {
	$length: length($padding);
	$padding-x: $padding;
	$padding-y: $padding;

	@if $length == 2 {
		$padding-x: nth($padding, 2);
		$padding-y: nth($padding, 1);
	}

	display: grid;
	grid-auto-rows: min-content;
	grid-template-columns: [full-start] minmax(#{map-get($paddings, origin) * $padding-x}, 1fr) [wrapper-start] 0 [main-start] minmax(#{map-get($paddings, origin) * $padding-x}, #{$width-max - $width-sidebar - (map-get($paddings, origin) * $padding-x * 3)}) [main-end] #{map-get($paddings, origin) * $padding-x} [sidebar-start] minmax(#{map-get($paddings, origin) * $padding-x}, $width-sidebar) [sidebar-end] 0 [wrapper-end] minmax(#{map-get($paddings, origin) * $padding-x}, 1fr) [full-end];

	@each $breakpoint in $breakpoints {
		@if (map-get($paddings, $breakpoint)) {
			@include breakpoint(#{$breakpoint}) {
				grid-template-columns: [full-start] minmax(#{map-get($paddings, $breakpoint) * $padding-x}, 1fr) [wrapper-start] 0 [main-start] minmax(#{map-get($paddings, $breakpoint) * $padding-x}, #{$width-max - $width-sidebar - (map-get($paddings, $breakpoint) * $padding-x * 3)}) [main-end] #{map-get($paddings, $breakpoint) * $padding-x} [sidebar-start] minmax(#{map-get($paddings, $breakpoint) * $padding-x}, $width-sidebar) [sidebar-end] 0 [wrapper-end] minmax(#{map-get($paddings, $breakpoint) * $padding-x}, 1fr) [full-end];
			}
		}
	}

	@if unitless($padding-y) {
		padding-bottom: $padding-y * map-get($paddings, origin);
		padding-top: $padding-y * map-get($paddings, origin);

		@each $breakpoint in $breakpoints {
			@if (map-get($paddings, $breakpoint)) {
				@include breakpoint(#{$breakpoint}) {
					padding-bottom: $padding-y * map-get($paddings, $breakpoint);
					padding-top: $padding-y * map-get($paddings, $breakpoint);
				}
			}
		}
	}
	@else {
		padding-bottom: $padding-y;
		padding-top: $padding-y;
	}
}

@mixin clearfix {

	&:before,
	&:after {
		content: "";
		display: table;
	}

	&:after {
		clear: both;
	}
}

@mixin hidden {
	border: 0;
	clip: rect(0, 0, 0, 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

@mixin visible {
	display: block !important;
	height: auto !important;
	opacity: 1 !important;
	overflow: visible !important;
	visibility: visible !important;
}

@mixin spacers($margin, $item: 0) {
	$length: length($margin);
	$vertical: math.div(nth($margin, 1), 2);

	margin: -1%;

	@if $length == 1 {
		margin: calc(#{$vertical} * -1);
	}

	@else if $length == 2 {
		$horizontal: math.div(nth($margin, 2), 2);
		margin: calc(#{$vertical} * -1) calc(#{$horizontal} * -1);
	}

	> * {
		margin: 1%;

		@if $length == 1 {
			margin: calc(#{$vertical});

			@if $item == 0 {
				width: auto;
			}

			@if $item != 0 {
				width: #{math.div(100% - (2% * $item), $item)};
				width: calc((100% - #{2 * $item * $vertical}) / #{$item});
			}
		}

		@else if $length == 2 {
			$horizontal: math.div(nth($margin, 2), 2);
			margin: calc(#{$vertical}) calc(#{$horizontal});

			@if $item == 0 {
				width: auto;
			}

			@if $item != 0 {
				width: #{math.div(100% - (2% * $item), $item)};
				width: calc((100% - #{2 * $item * $horizontal}) / #{$item});
			}
		}
	}
}

@mixin flex-flow($breakpoint, $width, $margin) {
	display: flex;
	flex-wrap: wrap;
	margin: calc(#{$margin} * -1);

	> * {
		flex-basis: calc(calc(#{$breakpoint} - 100%) * 999);
		flex-grow: 1;
		margin: $margin;
		max-width: 100%;
		min-width: calc(#{$width} - (#{$margin} * 2));
	}
}
